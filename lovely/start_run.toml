[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if _ch.rules.custom then"
position = "after"
match_indent = true
payload = """local anaglyphRules = {}
local disabledHands = {}
local disabledContaining = {}
local whitelistedHands = {}
local debuffedSuits = {}
local debuffedRanks = {}"""

# chdp rules
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "for k, v in ipairs(_ch.rules.custom) do"
position = "after"
match_indent = true
payload = """if v.id == 'no_editions' then
                        G.GAME.modifiers.no_edition_cards = true
                        G.GAME.modifiers.no_edition_jokers = true
                    elseif v.id == 'no_edition_cards' then
                        G.GAME.modifiers.no_edition_cards = true
                    elseif v.id == 'no_edition_jokers' then
                        G.GAME.modifiers.no_edition_jokers = true

                        -- EDITIONS - BASE GAME (note: it is recommended to ban corresponding tags for editions)

                    elseif v.id == 'no_foils' then --removes foil edition from all cards
                        G.GAME.modifiers.no_foil_cards = true
                        G.GAME.modifiers.no_foil_jokers = true
                    elseif v.id == 'no_foil_cards' then --removes foil edition from playing cards
                        G.GAME.modifiers.no_foil_cards = true
                    elseif v.id == 'no_foil_jokers' then --removes foil edition from jokers
                        G.GAME.modifiers.no_foil_jokers = true

                    elseif v.id == 'no_holos' then --removes holo edition from all cards
                        G.GAME.modifiers.no_holo_cards = true
                        G.GAME.modifiers.no_holo_jokers = true
                    elseif v.id == 'no_holo_cards' then --removes holo edition from playing cards
                        G.GAME.modifiers.no_holo_cards = true
                    elseif v.id == 'no_holo_jokers' then --removes holo edition from jokers
                        G.GAME.modifiers.no_holo_jokers = true

                    elseif v.id == 'no_polychromes' then --removes polychrome edition from all cards
                        G.GAME.modifiers.no_polychrome_cards = true
                        G.GAME.modifiers.no_polychrome_jokers = true
                    elseif v.id == 'no_polychrome_cards' then --removes polychrome edition from playing cards
                        G.GAME.modifiers.no_polychrome_cards = true
                    elseif v.id == 'no_polychrome_jokers' then --removes polychrome edition from jokers
                        G.GAME.modifiers.no_polychrome_jokers = true

                    elseif v.id == 'no_negative_jokers' then --removes negative edition from jokers
                        G.GAME.modifiers.no_negative_jokers = true

                        -- EDITIONS - BUNCO

                    elseif v.id == 'no_fluorescents' then --removes fluorescent edition from all cards
                        G.GAME.modifiers.no_fluorescent_cards = true
                        G.GAME.modifiers.no_fluorescent_jokers = true
                    elseif v.id == 'no_fluorescent_cards' then --removes fluorescent edition from playing cards
                        G.GAME.modifiers.no_fluorescent_cards = true
                    elseif v.id == 'no_fluorescent_jokers' then --removes fluorescent edition from jokers
                        G.GAME.modifiers.no_fluorescent_jokers = true
                    
                    elseif v.id == 'no_glitters' then --removes glitter edition from all cards
                        G.GAME.modifiers.no_glitter_cards = true
                        G.GAME.modifiers.no_glitter_jokers = true
                    elseif v.id == 'no_glitter_cards' then --removes glitter edition from playing cards
                        G.GAME.modifiers.no_glitter_cards = true
                    elseif v.id == 'no_glitter_jokers' then --removes glitter edition from jokers
                        G.GAME.modifiers.no_glitter_jokers = true
                    
                        -- EDITIONS - CRYPTID

                    elseif v.id == 'no_mosaics' then --removes mosaic edition from all cards
                        G.GAME.modifiers.no_mosaic_cards = true
                        G.GAME.modifiers.no_mosaic_jokers = true
                    elseif v.id == 'no_mosaic_cards' then --removes mosaic edition from playing cards
                        G.GAME.modifiers.no_mosaic_cards = true

                    elseif v.id == 'no_mosaic_jokers' then --removes mosaic edition from jokers
                        G.GAME.modifiers.no_mosaic_jokers = true
                    elseif v.id == 'no_glitcheds' then --removes glitched edition from all cards
                        G.GAME.modifiers.no_glitched_cards = true
                        G.GAME.modifiers.no_glitched_jokers = true
                    elseif v.id == 'no_glitched_cards' then --removes glitched edition from playing cards
                        G.GAME.modifiers.no_glitched_cards = true
                    elseif v.id == 'no_glitched_jokers' then --removes glitched edition from jokers
                        G.GAME.modifiers.no_glitched_jokers = true

                    elseif v.id == 'no_oversats' then --removes oversat edition from all cards
                        G.GAME.modifiers.no_oversat_cards = true
                        G.GAME.modifiers.no_oversat_jokers = true
                    elseif v.id == 'no_oversat_cards' then --removes oversat edition from playing cards
                        G.GAME.modifiers.no_oversat_cards = true
                    elseif v.id == 'no_oversat_jokers' then --removes oversat edition from jokers
                        G.GAME.modifiers.no_oversat_jokers = true

                    elseif v.id == 'no_golds' then --removes gold edition from all cards
                        G.GAME.modifiers.no_gold_cards = true
                        G.GAME.modifiers.no_gold_jokers = true
                    elseif v.id == 'no_gold_cards' then --removes gold edition from playing cards
                        G.GAME.modifiers.no_gold_cards = true
                    elseif v.id == 'no_gold_jokers' then --removes gold edition from jokers
                        G.GAME.modifiers.no_gold_jokers = true

                    elseif v.id == 'no_glasss' then --removes glass edition from all cards (i know it looks goofy)
                        G.GAME.modifiers.no_glass_cards = true
                        G.GAME.modifiers.no_glass_jokers = true
                    elseif v.id == 'no_glass_cards' then --removes glass edition from playing cards
                        G.GAME.modifiers.no_glass_cards = true
                    elseif v.id == 'no_glass_jokers' then --removes glass edition from jokers
                        G.GAME.modifiers.no_glass_jokers = true

                    elseif v.id == 'no_blurs' then --removes blur edition from all cards
                        G.GAME.modifiers.no_blur_cards = true
                        G.GAME.modifiers.no_blur_jokers = true
                    elseif v.id == 'no_blur_cards' then --removes blur edition from playing cards
                        G.GAME.modifiers.no_blur_cards = true
                    elseif v.id == 'no_blur_jokers' then --removes blur edition from jokers
                        G.GAME.modifiers.no_blur_jokers = true
                    
                    elseif v.id == 'no_astrals' then --removes astral edition from all cards
                        G.GAME.modifiers.no_astral_cards = true
                        G.GAME.modifiers.no_astral_jokers = true
                    elseif v.id == 'no_astral_cards' then --removes astral edition from playing cards
                        G.GAME.modifiers.no_astral_cards = true
                    elseif v.id == 'no_astral_jokers' then --removes astral edition from jokers
                        G.GAME.modifiers.no_astral_jokers = true
                    
                    elseif v.id == 'no_ms' then --removes m edition from all cards
                        G.GAME.modifiers.no_m_cards = true
                        G.GAME.modifiers.no_m_jokers = true
                    elseif v.id == 'no_m_cards' then --removes m edition from playing cards
                        G.GAME.modifiers.no_m_cards = true
                    elseif v.id == 'no_m_jokers' then --removes m edition from jokers
                        G.GAME.modifiers.no_m_jokers = true

                        -- BLINDS

                    elseif v.id == 'blind_scaling' then -- multiplies blind requirement by value
                        G.GAME.starting_params.ante_scaling = G.GAME.starting_params.ante_scaling * v.value
                    elseif v.id == 'money_scaling' then -- multiplies blind reward by value
                        G.GAME.modifiers.money_scaling = v.value
                    elseif v.id == 'money_total_scaling' then -- multiplies all money in blind by value
                        G.GAME.modifiers.money_total_scaling = v.value
                    elseif v.id == 'mts_scaling' then -- every ante, money total scaling = money total scaling + value
                        G.GAME.modifiers.mts_scaling = v.value
                        G.GAME.chdp_spacer = true

                        -- HANDS
                    
                    elseif v.id == 'disable_hand' then --hand is not allowed
                        disabledHands[#disabledHands+1] = v.hand

                    elseif v.id == 'disable_hand_containing' then --hands with this in them are not allowed
                        disabledContaining[#disabledContaining+1] = v.hand

                    elseif v.id == 'whitelist_hand' then --hand is not allowed
                        whitelistedHands = whitelistedHands or {}
                        whitelistedHands[#whitelistedHands+1] = v.hand

                    elseif v.id == 'blackjack' then -- hands must add up to X
                        G.GAME.modifiers.chdp_blackjack = v.value
                    
                        -- JOKER FUN

                    elseif v.id == 'minus_jokers_per_dollar' then -- -1 joker per value dollar
                        G.GAME.modifiers.minus_jokers_per_dollar = v.value
                    elseif v.id == 'jokers_per_dollar' then -- +1 joker per value dollar
                        G.GAME.modifiers.jokers_per_dollar = v.value

                    elseif v.id == 'overflow_perishable' then -- if jokers > joker slots, all jokers become perishable
                        G.GAME.modifiers.overflow_perishable = true
                    elseif v.id == 'overflow_debuff' then -- harsher version of last rule
                        G.GAME.modifiers.overflow_debuff = true
                    elseif v.id == 'overflow_debuff_one' then --debuffs one Joker for each
                        G.GAME.modifiers.overflow_debuff_one = true

                    elseif v.id == 'hand_per_joker' then --gain hand per joker
                        G.GAME.modifiers.hand_per_joker = true
                    elseif v.id == 'minus_discard_per_joker' then --gain hand per joker
                        G.GAME.modifiers.minus_discard_per_joker = true

                    elseif v.id == 'every_joker' then --open the floodgates
                        for k2, v2 in pairs(G.P_CENTERS) do
                            if string.find(k2, "j_") then
                                G.E_MANAGER:add_event(Event({
                                    func = function()
                                        add_joker(k2, nil, true)
                                    return true
                                    end
                                }))
                            end
                        end
                    elseif v.id == 'every_joker_mod' then --open the floodgates for one mod
                        for k2, v2 in pairs(G.P_CENTERS) do
                            if string.find(k2, "j_"..(v.key).."_") and 
                            not string.find(k2, "_flamboyant") and 
                            not string.find(k2, "_intrusive") and 
                            not string.find(k2, "_egocentric") and 
                            not string.find(k2, "_irritating") and 
                            not string.find(k2, "_wreckless") and 
                            not string.find(k2, "_emulous") and 
                            not string.find(k2, "_indulgent") and 
                            not string.find(k2, "_dissident") and 
                            not string.find(k2, "_deceptive") then
                                G.E_MANAGER:add_event(Event({
                                    func = function()
                                        add_joker(k2, nil, true)
                                    return true
                                    end
                                }))
                            end
                        end

                    elseif v.id == 'random_jokers' then --5 random jokers...
                        local EveryFuckingJoker = {}
                        for k2, v2 in pairs(G.P_CENTERS) do
                            if string.find(k2, "j_") then
                                EveryFuckingJoker[#EveryFuckingJoker+1] = k2
                            end
                        end
                        for i = 1, v.value do
                            G.E_MANAGER:add_event(Event({
                                func = function()
                                    add_joker(pseudorandom_element(EveryFuckingJoker, pseudoseed("random_jokers")), nil, true)
                                return true
                                end
                            }))
                        end
                    
                        
                    -- STICKERS

                    elseif v.id == 'enable_eternal_jokers' then --these 3 just do the same thing from stakes
                        G.GAME.modifiers.enable_eternals_in_shop = true
                    elseif v.id == 'enable_perishable_jokers' then
                        G.GAME.modifiers.enable_perishables_in_shop = true
                    elseif v.id == 'enable_rental_jokers' then
                        G.GAME.modifiers.enable_rentals_in_shop = true

                    elseif v.id == 'enable_singular_jokers' then --challenger deep stickers
                        G.GAME.modifiers['enable_chdp_singular'] = true
                    elseif v.id == 'enable_shrouded_jokers' then
                        G.GAME.modifiers['enable_chdp_shrouded'] = true

                    elseif v.id == 'enable_scattering_jokers' then --bunco time
                        G.GAME.modifiers['enable_bunc_scattering'] = true
                    elseif v.id == 'enable_reactive_jokers' then
                        G.GAME.modifiers['enable_bunc_reactive'] = true
                    elseif v.id == 'enable_hindered_jokers' then
                        G.GAME.modifiers['enable_bunc_hindered'] = true

                    elseif v.id == 'enable_stacked_cards' then -- Opalstuff time?
                        G.GAME.modifiers['enable_opal_stacked'] = true

                    elseif v.id == 'enable_all_stickers' then -- enable every sticker
                        for k, v in pairs(SMODS.Stickers) do
                            if v.sets.Joker and k ~= 'cry_hooked' and k ~= 'cry_function_sticker_desc' 
                            and k ~= "fam_locked" then
                                G.GAME.modifiers['enable_'..k] = true
                            end
                        end

                    elseif v.id == 'all_rental_jokers' then --every joker is rental
                        G.GAME.modifiers.all_rental_jokers = true
                    
                    elseif v.id == 'rentals_keep_price' then --rental jokers keep their purchase price
                        G.GAME.modifiers.rentals_keep_price = true

                    elseif v.id == 'rental_rate' then --sets rental rate
                        G.GAME.rental_rate = v.value
                    elseif v.id == 'rental_rate_increase' then --rental rate increases by value every Boss blind
                        G.GAME.modifiers.rental_rate_increase = v.value
                        G.GAME.chdp_spacer = true
                    elseif v.id == 'rental_rate_increase_all' then --rental rate increases by value EVERY blind 
                        G.GAME.modifiers.rental_rate_increase_all = v.value
                        G.GAME.chdp_spacer = true

                    elseif v.id == 'all_perishable_jokers' then --every joker is perishable
                        G.GAME.modifiers.all_perishable_jokers = true
                    elseif v.id == 'perishable_rounds' then --sets perishable rounds
                        G.GAME.perishable_rounds = v.value
                    
                    elseif v.id == 'all_singular_jokers' then -- every joker is singular
                        G.GAME.modifiers.all_singular_jokers = true

                    elseif v.id == 'all_shrouded_jokers' then -- every joker is shrouded etc.
                        G.GAME.modifiers.all_shrouded_jokers = true
                    
                    elseif v.id == 'all_pinned_jokers' then
                        G.GAME.modifiers.all_pinned_jokers = true

                    elseif v.id == 'all_reactive_jokers' then
                        G.GAME.modifiers.all_reactive_jokers = true
                    elseif v.id == 'all_hindered_jokers' then
                        G.GAME.modifiers.all_hindered_jokers = true
                    elseif v.id == 'all_scattering_jokers' then
                        G.GAME.modifiers.all_scattering_jokers = true

                    elseif v.id == 'cannot_sell_stickered' then
                        G.GAME.modifiers.cannot_sell_stickered = true
                        
                        -- SHOP STUFF

                    elseif v.id == 'no_vouchers' then --no vouchers appear in shop (NOTE: BAN VOUCHER TAG)
                        G.GAME.modifiers.no_vouchers = true
                    elseif v.id == 'reroll_cost_increase'then --rerolls cost value more
                        G.GAME.modifiers.reroll_cost_increase = v.value
                    elseif v.id == 'all_shop_scaling' then --cost of all items in shop is multiplied by value
                        G.GAME.modifiers.all_shop_scaling = v.value
                    elseif v.id == 'shop_scaling_ante_increase' then --shop price mult = shop price mult + value every boss blind
                        G.GAME.modifiers.shop_scaling_ante_increase = v.value
                    elseif v.id == 'shop_scaling_round_increase' then --shop price mult = shop price mult + value every round
                        G.GAME.modifiers.shop_scaling_round_increase = v.value
                    elseif v.id == 'disable_rerolls' then --shop price mult = shop price mult + value every round
                        G.GAME.modifiers.disable_rerolls = true
                    elseif v.id == 'forced_joker' then --forces a joker as the first joker in the shop
                        G.GAME.modifiers.forced_joker = v.card
                    elseif v.id == 'forced_joker_all' then --forces a joker as EVERY joker in the shop
                        G.GAME.modifiers.forced_joker_all = v.card
                    elseif v.id == 'forced_joker_pool' then --forces a pool of jokers as every joker in the shop
                        G.GAME.modifiers.forced_joker_pool = v.pool


                        -- OTHER CARD MODIFICATION

                    elseif v.id == 'disable_suit' then --disables a suit
                        debuffedSuits[#debuffedSuits+1] = v.value
                    elseif v.id == 'disable_rank' then --disables a rank
                        ranksForDebuff = {'2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace'}
                        debuffRank = 0
                        for kk, vv in ipairs(ranksForDebuff) do
                            if vv == v.value then
                                debuffRank = kk+1
                            end
                        end
                        debuffedRanks[#debuffedRanks+1] = debuffRank

                        -- TAG

                    elseif v.id == 'anaglyph' then --creates tag with name 'value'
                        anaglyphRules[#anaglyphRules+1] = v.tag
                    
                        -- BLINDS

                    elseif v.id == 'disable_small' then --disable small blinds
                        G.GAME.modifiers.disable_small = true
                        G.GAME.round_resets.blind_states["Small"] = "Hide"
                    elseif v.id == 'disable_small_ante' then --disable small blinds at ante X
                        G.GAME.modifiers.disable_small_ante = v.value

                    elseif v.id == 'disable_big' then --disable big blinds
                        G.GAME.modifiers.disable_big = true
                        G.GAME.round_resets.blind_states["Big"] = "Hide"
                    elseif v.id == 'disable_big_ante' then --disable big blinds at ante X
                        G.GAME.modifiers.disable_big_ante = v.value

                    elseif v.id == 'second_boss' then --add another blind
                        G.GAME.modifiers.second_boss = true
                        G.GAME.round_resets.blind_choices.ChDp_Boss = get_new_boss()
                        G.GAME.last_chdp_blind = G.GAME.round_resets.blind_choices.ChDp_Boss
                        G.GAME.round_resets.blind_states.ChDp_Boss = 'Upcoming'

                    elseif v.id == 'second_boss_ante' then --add another blind at ante X
                        G.GAME.modifiers.second_boss_ante = v.value

                    elseif v.id == 'chdp_third_boss' then -- AGAIN!
                        G.GAME.modifiers.second_boss = true
                        G.GAME.round_resets.blind_choices.ChDp_Boss = get_new_boss()
                        G.GAME.last_chdp_blind = G.GAME.round_resets.blind_choices.ChDp_Boss
                        G.GAME.round_resets.blind_states.ChDp_Boss = 'Upcoming'
                        G.GAME.modifiers.chdp_third_boss = true
                        G.GAME.round_resets.blind_choices.Chdp_Boss2 = get_new_boss()
                        G.GAME.last_chdp2_blind = G.GAME.round_resets.blind_choices.ChDp_Boss2
                        G.GAME.round_resets.blind_states.ChDp_Boss2 = 'Upcoming'

                    elseif v.id == 'chdp_third_boss_ante' then --AGAIN!!!
                        G.GAME.modifiers.chdp_third_boss_ante = v.value

                    elseif v.id == 'disable_skipping' then --disable skipping
                        G.GAME.modifiers.disable_skipping = true
                    elseif v.id == 'disable_skipping_ante' then --disable skipping at ante X
                        G.GAME.modifiers.disable_skipping_ante = v.value

                    elseif v.id == 'chdp_pillar' then --pillar :3
                        G.GAME.modifiers.chdp_pillar = true

                    
                        -- COMPAT - OTHER MODS

                    elseif v.id == 'disable_partner' then --disables Partner
                        G.GAME.modifiers.chdp_disabled_partner = true
                    elseif v.id == 'disable_charms' then --disables Charms
                        G.GAME.modifiers.chdp_disable_charms = true
                    elseif v.id == 'chdp_xp_mult_grim' then --multiplies all XP earned in Grim
                        G.GAME.modifiers.chdp_grim_xp_mult = v.value
                    elseif v.id == 'chdp_no_learning_grim' then -- hides the skill tree
                        G.GAME.modifiers.chdp_no_learning_grim = true

                    elseif v.id == 'chdp_xp_mult_yggdrasil' then -- multiplies all Yggdrasil XP
                        G.GAME.modifiers.chdp_ygg_xp_mult = v.value
                    elseif v.id == 'chdp_no_skills_yggdrasil' then -- disables every Yggdrasil skill
                    local SkillTreeTables = {}
                    for k2, v2 in ipairs(SkillTreeSections) do
                        for k3, v3 in ipairs(v2) do
                            SkillTreeTables[#SkillTreeTables+1] = v3
                        end
                    end
                    for k2, v2 in ipairs(SkillTreeTables) do
                        for k3, v3 in ipairs(SkillTreePerks[v2]) do
                            for k4, v4 in ipairs(v3) do
                                G.GAME.modifiers.chdp_banned_skills_yggdrasil[v4.perk_id] = true
                            end
                        end
                    end
                    elseif v.id == 'chdp_min_items_per_blind_yggdrasil' then -- min items given per blind in Yggdrasil
                        G.GAME.modifiers.chdp_ygg_min_mats = v.value
                        reset_blind_loots()
                    elseif v.id == 'chdp_max_items_per_blind_yggdrasil' then -- max items given per blind in Yggdrasil
                        G.GAME.modifiers.chdp_ygg_max_mats = v.value
                        reset_blind_loots()
                    elseif v.id == 'chdp_no_loot_yggdrasil' then -- no loot in yggdrasil
                        G.GAME.modifiers.chdp_ygg_min_mats = 0
                        G.GAME.modifiers.chdp_ygg_max_mats = 0
                        reset_blind_loots()
                    
                        -- MISCELLANEOUS

                    elseif v.id == 'win_ante' then --sets win ante
                        G.GAME.win_ante = v.value
                    elseif v.id == 'extra_hand_money_scaling' then --multiplies money from extra hands by value
                        G.GAME.modifiers.money_per_hand = (G.GAME.modifiers.money_per_hand or 1) * v.value
                    end
                    
                    if v.id == 'chaos_engine' or v.id == 'chaos_engine_all' or v.id == 'world_machine' then --dear god
                        G.GAME.modifiers[v.id] = true
                        if G.GAME.modifiers.world_machine == true then
                            G.GAME.modifiers.chaos_engine_all = true
                        end
                        CHDP.setup_chaos_run()

                        for k, v in ipairs(_ch.rules.custom) do --remove rules that are already used
                            for kk, vv in ipairs(G.GAME.chaos_engine_rules) do
                                if v.id == vv.id then
                                    table.remove(G.GAME.chaos_engine_rules, kk)
                                end
                            end
                        end

                        local chaos_number = pseudorandom('chaos_engine')
                        for k, v in ipairs(G.GAME.chaos_engine_rules) do
                            if chaos_number < k/#G.GAME.chaos_engine_rules then
                                if v.id == 'enable_eternal_jokers' then
                                    G.GAME.modifiers.enable_eternals_in_shop = true
                                    G.GAME.chaos_engine_rules[#G.GAME.chaos_engine_rules+1] = {id = 'all_eternal'}
                                elseif v.id == 'all_eternal' then
                                    G.GAME.modifiers.all_eternal = true
                                    for kk, vv in ipairs(G.jokers.cards) do
                                        vv:set_eternal(true)
                                    end
                                elseif v.id == 'enable_rental_jokers' then
                                    G.GAME.modifiers.enable_rentals_in_shop = true
                                    G.GAME.chaos_engine_rules[#G.GAME.chaos_engine_rules+1] = {id = 'all_rental_jokers'}
                                    local rnd_num = pseudorandom('rule')
                                    G.GAME.chaos_engine_rules[#G.GAME.chaos_engine_rules+1] = {id = 'rental_rate', value = math.ceil(2 + rnd_num*4)}
                                elseif v.id == 'all_rental_jokers' then    
                                    G.GAME.modifiers.all_rental_jokers = true
                                    for kk, vv in ipairs(G.jokers.cards) do
                                        vv:set_rental(true)
                                    end
                                elseif v.id == 'enable_perishable_jokers' then
                                    G.GAME.modifiers.enable_perishables_in_shop = true
                                    G.GAME.chaos_engine_rules[#G.GAME.chaos_engine_rules+1] = {id = 'all_perishable_jokers'}
                                elseif v.id == 'all_perishable_jokers' then
                                    G.GAME.modifiers.all_perishable_jokers = true
                                    for kk, vv in ipairs(G.jokers.cards) do
                                        vv:set_perishable(true)
                                    end
                                elseif v.id == 'enable_scattering_jokers' then
                                    G.GAME.modifiers.enable_scattering_in_shop = true
                                elseif v.id == 'enable_reactive_jokers' then
                                    G.GAME.modifiers.enable_reactive_in_shop = true
                                elseif v.id == 'enable_hindered_jokers' then
                                    G.GAME.modifiers.enable_hindered_in_shop = true
                                elseif v.id == 'enable_shrouded_jokers' then
                                    G.GAME.modifiers.enable_shroudeds_in_shop = true
                                elseif v.id == 'anaglyph' then
                                    G.GAME.modifiers.anaglyph[#G.GAME.modifiers.anaglyph+1] = v.tag
                                    local chaos_number = pseudorandom('chaos_engine')
                                    for k, v in ipairs(G.GAME.chaos_tags) do --choose a random tag to add as anaglyph rule to the chaos engine
                                        if chaos_number < k/#G.GAME.chaos_tags then
                                            G.GAME.chaos_engine_rules[#G.GAME.chaos_engine_rules+1] = {id = 'anaglyph', value = localize{type = 'name_text', set = 'Tag', key = 'tag_'..v, nodes = {}}, tag = v}
                                            break
                                        end
                                    end
                                elseif v.id == 'no_shop_jokers' then
                                    G.GAME.joker_rate = 0
                                elseif v.id == 'win_ante' then
                                    G.GAME.win_ante = v.value
                                elseif v.id == 'no_vouchers' then
                                    G.GAME.modifiers.no_vouchers = true
                                    G.GAME.current_round.voucher = nil
                                    G.GAME.banned_keys['tag_voucher'] = true
                                    for kk, vv in ipairs(G.GAME.chaos_tags) do
                                        if vv == 'voucher' or vv == 'cry_better_voucher' then
                                            table.remove(G.GAME.chaos_tags, kk)
                                        end
                                    end
                                elseif v.id == 'blind_scaling' then
                                    G.GAME.starting_params.ante_scaling = G.GAME.starting_params.ante_scaling * v.value
                                
                                elseif v.id == 'disable_hand' then
                                    disabledHands[#disabledHands+1] = v.hand
                                    local chaos_number = pseudorandom('chaos_engine')
                                    for k, v in ipairs(G.GAME.chaos_hands) do --choose a random hand to ban
                                        if chaos_number < k/#G.GAME.chaos_hands then
                                            G.GAME.chaos_engine_rules[#G.GAME.chaos_engine_rules+1] = {id = 'disable_hand', value = v, hand = v}
                                            break
                                        end
                                    end
                                elseif v.id == 'disable_hand_containing' then
                                    disabledContaining[#disabledContaining+1] = v.hand
                               
                                elseif v.value then
                                    G.GAME.modifiers[v.id] = v.value
                                else
                                    G.GAME.modifiers[v.id] = true
                                end
                                G.GAME.chaos_rules[#G.GAME.chaos_rules+1] = v
                                if v.edition_type == 'cards' and #G.GAME.chaos_editions_cards > 0 then
                                    local chaos_number = pseudorandom('chaos_engine')
                                    for kk, vv in ipairs(G.GAME.chaos_editions_cards) do --choose a random playing card edition to add as a ban
                                        if chaos_number < kk/#G.GAME.chaos_editions_cards then
                                            G.GAME.chaos_engine_rules[k] = {id = 'no_'..vv..'_cards', edition_type = 'cards'}
                                            table.remove(G.GAME.chaos_editions_cards, kk)
                                            break
                                        end
                                    end
                                elseif v.edition_type == 'jokers' and #G.GAME.chaos_editions_jokers > 0 then
                                    local chaos_number = pseudorandom('chaos_engine')
                                    for kk, vv in ipairs(G.GAME.chaos_editions_jokers) do --choose a random joker edition to add as a ban
                                        if chaos_number < kk/#G.GAME.chaos_editions_jokers then
                                            G.GAME.chaos_engine_rules[k] = {id = 'no_'..vv..'_jokers', edition_type = 'jokers'}
                                            table.remove(G.GAME.chaos_editions_jokers, kk)
                                            break
                                        end
                                    end
                                elseif v.edition_type == 'all' and #G.GAME.chaos_editions > 0  then
                                    local chaos_number = pseudorandom('chaos_engine')
                                    for kk, vv in ipairs(G.GAME.chaos_editions) do --choose a random edition to add as a ban for every card
                                        if chaos_number < kk/#G.GAME.chaos_editions then
                                            G.GAME.chaos_engine_rules[k] = {id = 'no_'..vv..'s', edition_type = 'all'}
                                            table.remove(G.GAME.chaos_editions, kk)
                                            break
                                        end
                                    end
                                elseif v.id ~= 'anaglyph' then
                                    table.remove(G.GAME.chaos_engine_rules, k)
                                end
                                break
                            end
                        end
                    end
                    G.GAME.modifiers.anaglyph = anaglyphRules
                    G.GAME.modifiers.disable_hand = disabledHands
                    G.GAME.modifiers.disable_hand_containing = disabledContaining
                    G.GAME.modifiers.whitelist_hand = whitelistedHands
                    G.GAME.modifiers.disable_suit = debuffedSuits
                    G.GAME.modifiers.disable_rank = debuffedRanks"""